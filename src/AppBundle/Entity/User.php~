<?php

namespace AppBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * User
 *
 * @ORM\Table(name="user")
 * @ORM\Entity(repositoryClass="AppBundle\Entity\UserRepository")
 */
class User
{

    //Constant to use it with the field status to create a new User
    const STATUS_INACTIVATE =0;
    const STATUS_ACTIVATE =1;
    const STATATUS_DELETE =2;

    /**
     * @var string
     *
     * @ORM\Column(name="username", type="string", length=50, nullable=false)
     *
     */
    private $username;

    /**
     * @var string
     *
     * @ORM\Column(name="email", type="string", length=50, nullable=false)
     *
     * @Assert\Email(
     *     message = "El email '{{ value }}' no es un email valido.",
     *     checkMX = true
     * )
     */
    private $email;

    /**
     * @var string
     *
     * @ORM\Column(name="password", type="string", length=50, nullable=false)
     */
    private $password;

    /**
     * @var integer
     *
     * @ORM\Column(name="status", type="integer", nullable=false)
     *
     * @Assert\Type(
     *     type="integer",
     *     message="El valor {{ value }} no es del tipo Entero"
     * )
     * @Assert\Range(
     *      min = 0,
     *      max = 2,
     *      minMessage = "Usted debe escoger un numero mayor o igual a {{ limit }}",
     *      maxMessage = "Usted debe escoger un numero menor o igual a {{ limit }}"
     * )
     */
    private $status;

    /**
     * @var string
     *
     * @ORM\Column(name="roles", type="json_array", nullable=false)
     */
    private $roles;

    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    private $id;

    /**
     * @var \Doctrine\Common\Collections\Collection
     *
     * @ORM\ManyToMany(targetEntity="AppBundle\Entity\Test", mappedBy="user")
     */
    private $test;

    /**
     * @var \Doctrine\Common\Collections\Collection
     *
     * @ORM\ManyToMany(targetEntity="AppBundle\Entity\TermData", mappedBy="user")
     */
    private $termData;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->test = new \Doctrine\Common\Collections\ArrayCollection();
        $this->termData = new \Doctrine\Common\Collections\ArrayCollection();

        //By Default, An User should be created like an active user
        $this->status = self::STATUS_ACTIVATE;
    }

    /**
     * Set username
     *
     * @param string $username
     *
     * @return User
     */
    public function setUsername($username)
    {
        $this->username = $username;

        return $this;
    }

    /**
     * Get username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }

    /**
     * Set email
     *
     * @param string $email
     *
     * @return User
     */
    public function setEmail($email)
    {
        $this->email = $email;

        return $this;
    }

    /**
     * Get email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }

    /**
     * Set password
     *
     * @param string $password
     *
     * @return User
     */
    public function setPassword($password)
    {
        $this->password = $password;

        return $this;
    }

    /**
     * Get password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->password;
    }

    /**
     * Set status
     *
     * @param integer $status
     *
     * @return User
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get status
     *
     * @return integer
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set roles
     *
     * @param string $roles
     *
     * @return User
     */
    public function setRoles($roles)
    {
        $this->roles = $roles;

        return $this;
    }

    /**
     * Get roles
     *
     * @return string
     */
    public function getRoles()
    {
        return $this->roles;
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Add test
     *
     * @param \AppBundle\Entity\Test $test
     *
     * @return User
     */
    public function addTest(\AppBundle\Entity\Test $test)
    {
        $this->test[] = $test;

        return $this;
    }

    /**
     * Remove test
     *
     * @param \AppBundle\Entity\Test $test
     */
    public function removeTest(\AppBundle\Entity\Test $test)
    {
        $this->test->removeElement($test);
    }

    /**
     * Get test
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getTest()
    {
        return $this->test;
    }

    /**
     * Add termDatum
     *
     * @param \AppBundle\Entity\TermData $termDatum
     *
     * @return User
     */
    public function addTermDatum(\AppBundle\Entity\TermData $termDatum)
    {
        $this->termData[] = $termDatum;

        return $this;
    }

    /**
     * Remove termDatum
     *
     * @param \AppBundle\Entity\TermData $termDatum
     */
    public function removeTermDatum(\AppBundle\Entity\TermData $termDatum)
    {
        $this->termData->removeElement($termDatum);
    }

    /**
     * Get termData
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getTermData()
    {
        return $this->termData;
    }
}
